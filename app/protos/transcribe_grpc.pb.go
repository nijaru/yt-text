// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: protos/transcribe.proto

package transcribe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TranscriptionService_Validate_FullMethodName             = "/transcribe.TranscriptionService/Validate"
	TranscriptionService_Transcribe_FullMethodName           = "/transcribe.TranscriptionService/Transcribe"
	TranscriptionService_FetchYouTubeCaptions_FullMethodName = "/transcribe.TranscriptionService/FetchYouTubeCaptions"
)

// TranscriptionServiceClient is the client API for TranscriptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TranscriptionService defines the gRPC service for video transcription
type TranscriptionServiceClient interface {
	// Validate checks if a video URL is valid and can be processed
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*VideoInfo, error)
	// Transcribe starts a video transcription and streams progress updates
	Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranscribeResponse], error)
	// FetchYouTubeCaptions retrieves captions from YouTube API
	FetchYouTubeCaptions(ctx context.Context, in *CaptionRequest, opts ...grpc.CallOption) (*TranscribeResponse, error)
}

type transcriptionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTranscriptionServiceClient(cc grpc.ClientConnInterface) TranscriptionServiceClient {
	return &transcriptionServiceClient{cc}
}

func (c *transcriptionServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*VideoInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoInfo)
	err := c.cc.Invoke(ctx, TranscriptionService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transcriptionServiceClient) Transcribe(ctx context.Context, in *TranscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TranscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TranscriptionService_ServiceDesc.Streams[0], TranscriptionService_Transcribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TranscribeRequest, TranscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TranscriptionService_TranscribeClient = grpc.ServerStreamingClient[TranscribeResponse]

func (c *transcriptionServiceClient) FetchYouTubeCaptions(ctx context.Context, in *CaptionRequest, opts ...grpc.CallOption) (*TranscribeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranscribeResponse)
	err := c.cc.Invoke(ctx, TranscriptionService_FetchYouTubeCaptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TranscriptionServiceServer is the server API for TranscriptionService service.
// All implementations must embed UnimplementedTranscriptionServiceServer
// for forward compatibility.
//
// TranscriptionService defines the gRPC service for video transcription
type TranscriptionServiceServer interface {
	// Validate checks if a video URL is valid and can be processed
	Validate(context.Context, *ValidateRequest) (*VideoInfo, error)
	// Transcribe starts a video transcription and streams progress updates
	Transcribe(*TranscribeRequest, grpc.ServerStreamingServer[TranscribeResponse]) error
	// FetchYouTubeCaptions retrieves captions from YouTube API
	FetchYouTubeCaptions(context.Context, *CaptionRequest) (*TranscribeResponse, error)
	mustEmbedUnimplementedTranscriptionServiceServer()
}

// UnimplementedTranscriptionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTranscriptionServiceServer struct{}

func (UnimplementedTranscriptionServiceServer) Validate(context.Context, *ValidateRequest) (*VideoInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedTranscriptionServiceServer) Transcribe(*TranscribeRequest, grpc.ServerStreamingServer[TranscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Transcribe not implemented")
}
func (UnimplementedTranscriptionServiceServer) FetchYouTubeCaptions(context.Context, *CaptionRequest) (*TranscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchYouTubeCaptions not implemented")
}
func (UnimplementedTranscriptionServiceServer) mustEmbedUnimplementedTranscriptionServiceServer() {}
func (UnimplementedTranscriptionServiceServer) testEmbeddedByValue()                              {}

// UnsafeTranscriptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TranscriptionServiceServer will
// result in compilation errors.
type UnsafeTranscriptionServiceServer interface {
	mustEmbedUnimplementedTranscriptionServiceServer()
}

func RegisterTranscriptionServiceServer(s grpc.ServiceRegistrar, srv TranscriptionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTranscriptionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TranscriptionService_ServiceDesc, srv)
}

func _TranscriptionService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptionServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptionService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptionServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TranscriptionService_Transcribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TranscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TranscriptionServiceServer).Transcribe(m, &grpc.GenericServerStream[TranscribeRequest, TranscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TranscriptionService_TranscribeServer = grpc.ServerStreamingServer[TranscribeResponse]

func _TranscriptionService_FetchYouTubeCaptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TranscriptionServiceServer).FetchYouTubeCaptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TranscriptionService_FetchYouTubeCaptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TranscriptionServiceServer).FetchYouTubeCaptions(ctx, req.(*CaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TranscriptionService_ServiceDesc is the grpc.ServiceDesc for TranscriptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TranscriptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "transcribe.TranscriptionService",
	HandlerType: (*TranscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _TranscriptionService_Validate_Handler,
		},
		{
			MethodName: "FetchYouTubeCaptions",
			Handler:    _TranscriptionService_FetchYouTubeCaptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transcribe",
			Handler:       _TranscriptionService_Transcribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/transcribe.proto",
}
