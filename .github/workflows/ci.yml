name: CI

on:
    push:
        branches: ["main"]
    pull_request:
        branches: ["main"]
    workflow_dispatch:

jobs:
    go-lint:
        name: Go Lint
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: app/go.mod
                  cache: true

            - name: golangci-lint
              uses: golangci/golangci-lint-action@v4
              with:
                  version: latest
                  working-directory: app
                  args: --timeout=5m

    python-lint:
        name: Python Lint
        runs-on: ubuntu-latest
        timeout-minutes: 5
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.10'
                  cache: 'pip'

            - name: Install dependencies
              working-directory: ./python
              run: |
                  python -m pip install --upgrade pip
                  pip install ruff mypy
                  pip install -r requirements.txt

            - name: Run Ruff
              working-directory: ./python
              run: ruff check .

            - name: Run Mypy
              working-directory: ./python
              run: mypy scripts

    go-test:
        name: Go Tests
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - uses: actions/checkout@v4

            - name: Set up Go
              uses: actions/setup-go@v5
              with:
                  go-version-file: app/go.mod
                  cache: true

            - name: Build
              working-directory: ./app
              run: go build -v ./...

            - name: Test
              working-directory: ./app
              run: go test -v -race ./...

    python-test:
        name: Python Tests
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.10'
                  cache: 'pip'

            - name: Install dependencies
              working-directory: ./python
              run: |
                  python -m pip install --upgrade pip
                  pip install pytest
                  pip install -r requirements.txt

            - name: Run tests
              working-directory: ./python
              run: pytest

    security-scan:
        name: Security Scan
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Run gosec Security Scanner
              uses: securego/gosec@master
              with:
                  working-directory: app
                  args: ./...

            - name: Run Bandit (Python Security Scanner)
              uses: actions/setup-python@v5
              with:
                  python-version: '3.10'
                  
            - name: Install Bandit
              run: pip install bandit
                
            - name: Run Bandit
              working-directory: ./python
              run: bandit -r scripts/ -f screen

    docker:
        name: Docker Build and Scan
        runs-on: ubuntu-latest
        needs: [go-test, go-lint, python-test, python-lint, security-scan]
        timeout-minutes: 15
        steps:
            - uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false
                  load: true
                  file: ./docker/fly/Dockerfile
                  tags: yt-text:${{ github.sha }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

            - name: Run Trivy vulnerability scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: yt-text:${{ github.sha }}
                  format: "table"
                  exit-code: "1"
                  severity: "CRITICAL,HIGH"

            - name: Test image
              run: |
                  docker run --rm yt-text:${{ github.sha }} --version

    dependency-review:
        name: Dependency Review
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - uses: actions/checkout@v4

            - name: Dependency Review
              uses: actions/dependency-review-action@v4
